@page "/"
@using System.Timers
@using System.Drawing

<PageTitle>Game of Life</PageTitle>

<h1>Game of Life</h1>

<fieldset class="border p-2" style="width: fit-content; float: left">
    <fieldset class="border p-2" style="width: fit-content">
        <legend class="w-auto">Info</legend>
        <p>Learn more about the Game of Life <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" rel="noopener noreferrer" target="_blank">here</a>.</p>
        <p>Click on the cells to seed the world then Start the game!</p>
    </fieldset>

    <legend class="w-auto">Settings</legend>
    <p>
        <label>Rows: <input @bind="_worldRows" disabled="@_running"/></label>
    </p>
    <p>
        <label>Columns: <input @bind="_worldColumns" disabled="@_running"/></label>
    </p>
    <p>
        <label>Speed (ms): <input @bind="_interval" disabled="@_running"/></label>
    </p>
    <p>
        <label>Zombies? <input type="checkbox" @bind="_isZombies" disabled="@_running"/></label>
    </p>

    <p>
        <button class="btn btn-primary" @onclick="ConfigureWorld" disabled="@_running">Resize/Reset world</button>
    </p>
    <fieldset class="border p-2" style="width: fit-content;">
        <legend class="w-auto">Stats</legend>
        <p>
            <label>Generation: @_generation</label>
        </p>
        <p>
            <label>Alive count: @GetAliveCount()</label>
        </p>
    </fieldset>
    <p>
        <button style="margin: 10px" disabled="@(!_running)" class="btn btn-danger" @onclick="Stop">Stop</button>
        <button style="margin: 10px" disabled="@_running" class="btn btn-success" @onclick="Start">Start/Continue</button>
    </p>
</fieldset>

<br />
<table class="table" style="width: auto; margin: auto">
    <tbody>
    @for (var x = 0; x < _world.GetLength(0); x++)
    {
        <tr>
            @for (var y = 0; y < _world.GetLength(1); y++)
            {
                var newX = x;
                var newY = y;
                var color = _world[newX, newY].IsAlive ? "black" : "white";
                if (_isZombies && _world[newX, newY].IsZombie)
                {
                    color = "darkgreen";
                }
                <td @onclick="() => CellClicked(newX, newY)" style="background: @color"></td>
            }
        </tr>
    }
    </tbody>
</table>

@code
{

    private int _worldRows = 32;
    private int _worldColumns = 32;
    private Cell[,] _world = new Cell[0, 0];
    private readonly Timer _timer = new(500);
    private int _generation = 0;
    private bool _running;
    private double _interval = 500d;
    private bool _isZombies;

    protected override async Task OnInitializedAsync()
    {
        await ConfigureWorld();

        _timer.Elapsed += Update;
    }

    private void Update(object? sender, ElapsedEventArgs e)
    {
        _ = InvokeAsync(() =>
        {
            _generation++;
            Evolve();
            StateHasChanged();
        });
    }

    private void Evolve()
    {
        var oldWorld = new Cell[_world.GetLength(0), _world.GetLength(1)];
        for (var x = 0; x < oldWorld.GetLength(0); x++)
        {
            for (var y = 0; y < oldWorld.GetLength(1); y++)
            {
                oldWorld[x, y] = _world[x, y].Clone();
            }
        }

        for (var x = 0; x < oldWorld.GetLength(0); x++)
        {
            for (var y = 0; y < oldWorld.GetLength(1); y++)
            {
                var neighbors = GetAliveNeighbors(oldWorld, x, y);
                var isAlive = IsCellAlive(oldWorld, x, y, neighbors);
                _world[x, y].IsAlive = isAlive;
            }
        }
    }

    private static int GetAliveNeighbors(Cell[,] oldWorld, int x, int y)
    {
        var count = 0;
        if (y > 0 && oldWorld[x, y - 1].IsAlive) // left
            count++;
        if (y < oldWorld.GetLength(1) - 1 && oldWorld[x, y + 1].IsAlive) // right
            count++;
        if (x > 0 && oldWorld[x - 1, y].IsAlive) // up
            count++;
        if (x < oldWorld.GetLength(0) - 1 && oldWorld[x + 1, y].IsAlive) // down
            count++;
        if (y > 0 && x > 0 && oldWorld[x - 1, y - 1].IsAlive) // left up
            count++;
        if (y < oldWorld.GetLength(1) - 1 && x > 0 && oldWorld[x - 1, y + 1].IsAlive) // right up
            count++;
        if (y > 0 && x < oldWorld.GetLength(0) - 1 && oldWorld[x + 1, y - 1].IsAlive) // left down
            count++;
        if (y < oldWorld.GetLength(1) - 1 && x < oldWorld.GetLength(0) - 1 && oldWorld[x + 1, y + 1].IsAlive) // right down
            count++;

        return count;
    }

    private bool IsCellAlive(Cell[,] oldWorld, int x, int y, int neighbors)
    {
        if (_isZombies && oldWorld[x, y].IsZombie)
            return true;

        return neighbors == 3 || (neighbors == 2 && oldWorld[x, y].IsAlive);
    }

    private async Task ConfigureWorld()
    {
        _timer.Stop();
        _worldRows = Math.Clamp(_worldRows, 1, 128);
        _worldColumns = Math.Clamp(_worldColumns, 1, 128);
        _world = new Cell[_worldRows, _worldColumns];
        for (var x = 0; x < _world.GetLength(0); x++)
            for (var y = 0; y < _world.GetLength(1); y++)
                _world[x, y] = new Cell();
        _generation = 0;
        _running = false;
    }

    private async Task CellClicked(int x, int y)
    {
        if (_running)
            return;

        _world[x, y].SeedIsAlive = !_world[x, y].IsAlive;
    }

    private async Task Start()
    {
        _running = true;
        _timer.Interval = _interval;
        _timer.Start();
    }

    private async Task Stop()
    {
        _timer.Stop();
        _running = false;
    }

    private int GetAliveCount()
    {
        var count = 0;
        for (var x = 0; x < _world.GetLength(0); x++)
            for (var y = 0; y < _world.GetLength(1); y++)
                if (_world[x, y].IsAlive)
                    count++;
        return count;
    }

    private class Cell
    {
        private bool _isAlive;
        private int _aliveCount;

        public bool IsAlive
        {
            get => _isAlive;
            set
            {
                _isAlive = value;

                if (_isAlive)
                    _aliveCount++;
                else if (_aliveCount > 0)
                    _aliveCount++;
            }
        }

        public bool SeedIsAlive
        {
            set { _isAlive = value; }
        }

        public bool IsZombie => _aliveCount > 2;

        public Cell Clone()
        {
            return new Cell
            {
                _isAlive = _isAlive,
                _aliveCount = _aliveCount
            };
        }
    }
}